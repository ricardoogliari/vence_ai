// Mocks generated by Mockito 5.4.6 from annotations
// in vence_ai/test/offers_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:ui' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:vence_ai/utils/command.dart' as _i2;
import 'package:vence_ai/viewmodels/offers_view_model.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeCommand0_0<T> extends _i1.SmartFake implements _i2.Command0<T> {
  _FakeCommand0_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [OffersViewmodel].
///
/// See the documentation for Mockito's code generation for more information.
class MockOffersViewmodel extends _i1.Mock implements _i3.OffersViewmodel {
  MockOffersViewmodel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Command0<dynamic> get getHolidays =>
      (super.noSuchMethod(
            Invocation.getter(#getHolidays),
            returnValue: _FakeCommand0_0<dynamic>(
              this,
              Invocation.getter(#getHolidays),
            ),
          )
          as _i2.Command0<dynamic>);

  @override
  set getHolidays(_i2.Command0<dynamic>? value) => super.noSuchMethod(
    Invocation.setter(#getHolidays, value),
    returnValueForMissingStub: null,
  );

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  void addListener(_i4.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i4.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
